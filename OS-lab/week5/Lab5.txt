Lab 5: Sept 28th Simulating Memory: Page tables and TLB

Task 1: Simulating a Page Table. Look at the following code from Chapter 18 of the textbook. This code essentially shows how a page-table entry is processed. Assume that a process virtual address space is 16-bits and the RAM is 16MB. Assume that a process generates a sequence of virtual address, you need to translate them into physical addresses. For this purpose, you need to simulate/implement the following:

a. A random/deterministic sequence of virtual addresses in the valid format
b. Page table functions
c. Page table entries: assume that we implement Valid, Present, Protect-bits (3-bits Read-write-execute), dirty bit, User/kernel mode bit
d.  Functions like SEGMENTATION_FAULT/PROTECTION_FAULT, RaiseException and so on.
e. A timer function to measure the time taken to access
---a valid page
---an invalid page
---a valid page but protection bits do not allow access

Refer to Section 18.3 to get more help. The output should be a sequence of virtual address, with the correct physical address and the time taken for translation and the total memory access time (summation).

1 //Extract the VPN from the virtual address
2 VPN = (VirtualAddress & VPN_MASK) >> SHIFT
3
4 // Form the address of the page-table entry (PTE)
5 PTEAddr = PTBR + (VPN * sizeof(PTE))
6
7 // Fetch the PTE
8 PTE = AccessMemory(PTEAddr)
9
10 // Check if process can access the page
11 if (PTE.Valid == False)
12 RaiseException(SEGMENTATION_FAULT)
13 else if (CanAccess(PTE.ProtectBits) == False)
14 RaiseException(PROTECTION_FAULT)
15 else
16 // Access is OK: form physical address and fetch it
17 offset = VirtualAddress & OFFSET_MASK
18 PhysAddr = (PTE.PFN << PFN_SHIFT) | offset
19 Register = AccessMemory(PhysAddr)

Task 2: Simulating a TLB. The following code is for TLB implementation from Chapter 19. You need to repeat the above experiment (meaning run the same sequence of virtual addresses) assuming that we have different TLBs of sizes, 64, 128 and 256. Measure the times and show the difference from the previous scenario for similar access.

1 VPN = (VirtualAddress & VPN_MASK) >> SHIFT
2 (Success, TlbEntry) = TLB_Lookup(VPN)
3 if (Success == True) // TLB Hit
4 if (CanAccess(TlbEntry.ProtectBits) == True)
5 Offset = VirtualAddress & OFFSET_MASK
6 PhysAddr = (TlbEntry.PFN << SHIFT) | Offset
7 Register = AccessMemory(PhysAddr)
8 else
9 RaiseException(PROTECTION_FAULT)
10 else // TLB Miss
11 PTEAddr = PTBR + (VPN * sizeof(PTE))
12 PTE = AccessMemory(PTEAddr)
13 if (PTE.Valid == False)
14 RaiseException(SEGMENTATION_FAULT)
15 else if (CanAccess(PTE.ProtectBits) == False)
16 RaiseException(PROTECTION_FAULT)
17 else
18 TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits)
19 RetryInstruction()

The output of this program is similar to the previous program except you will also include time taken to access TLB and time taken during TLB miss.

Notes:
1. Using time.h library and functions like timeoftheday, gettime etc can be quite useful for measurement.
2. Functions like, sleep, rand are useful.
3. Use the code you wrote for random number generation to simulate the virtual addresses generated.
4. Use the bit level operations in C to do the shifting and masking operations.
5. Please note that the sizes of the virtual and physical addresses must be conforming to the specification.
